Plan:

Build SQLCipher library from source.
Build the Qt SQL driver plugin (qsqlcipher) linking against the SQLCipher library.
Copy the built plugin to your Qt sqldrivers directory.
Verify your Qt project configuration to load the plugin path.
Use "QSQLCIPHER" as the driver name in your code and set the encryption key with PRAGMA.
Step 1: Build SQLCipher library

Open a terminal in the "sqlcipher" directory.
Run the following commands to configure and build SQLCipher:

./configure --enable-tempstore=yes CFLAGS="-DSQLITE_HAS_CODEC" LDFLAGS="-lcrypto"
make
make install
(On Windows, you may need to use MSYS2 or a similar environment and adapt commands accordingly.)
Step 2: Build Qt SQLCipher driver plugin

Navigate to your Qt SQL driver source directory (usually under your Qt installation, e.g., Qt/5.x.x/Src/qtbase/src/plugins/sqldrivers).
Copy the SQLite driver source code and modify it to link against the SQLCipher library instead of SQLite.
Update the driver source to define SQLITE_HAS_CODEC and link with SQLCipher.
Run qmake and make to build the qsqlcipher plugin.
Alternatively, if you have the qsqlcipher source, build it directly with:

qmake "INCLUDEPATH+=/path/to/sqlcipher" "LIBS+=-L/path/to/sqlcipher -lsqlcipher -lcrypto" sqldrivers.pro
make
Step 3: Copy the built plugin

Copy the resulting qsqlcipher.dll (or .so/.dylib) to your Qt application's sqldrivers directory (e.g., plugins/sqldrivers).
Step 4: Verify Qt project configuration

Ensure your Qt project adds the sqldrivers path to the library paths (you already do this in your code).
Step 5: Use the driver in your code

Change the driver name to "QSQLCIPHER" in your code when adding the database.
Set the encryption key with PRAGMA key = 'your_key'; after opening the database.